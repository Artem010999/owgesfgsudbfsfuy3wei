from gigachat import GigaChat
import ssl
import json

ssl_context = ssl.create_default_context()
ssl_context.check_hostname = False
ssl_context.verify_mode = ssl.CERT_NONE

giga = GigaChat(
    credentials="OWRlNjRhNDMtZGQ3OC00NmQyLWI2NTAtOWEyYTU0Mzk0MGQ1OjkwYmIwMDMzLWUyNTUtNGIwMS1iMjY5LThjZjcyZWQwNTZiNA==",
    ssl_context=ssl_context,
    verify_ssl_certs=False
)

def generate_profession_data():  
    system_prompt = """–¢—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å –¥–∞–Ω–Ω—ã–µ –æ —Å–ª—É—á–∞–π–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏. 
    –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
    {
        "profession": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏",
        "schedule": {
            "morning": ["–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 1 —Å –≤—Ä–µ–º–µ–Ω–µ–º", "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 2 —Å –≤—Ä–µ–º–µ–Ω–µ–º", "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 3 —Å –≤—Ä–µ–º–µ–Ω–µ–º"],
            "lunch": ["–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 1 —Å –≤—Ä–µ–º–µ–Ω–µ–º", "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 2 —Å –≤—Ä–µ–º–µ–Ω–µ–º", "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 3 —Å –≤—Ä–µ–º–µ–Ω–µ–º"],
            "evening": ["–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 1 —Å –≤—Ä–µ–º–µ–Ω–µ–º", "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 2 —Å –≤—Ä–µ–º–µ–Ω–µ–º", "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 3 —Å –≤—Ä–µ–º–µ–Ω–µ–º"]
        },
        "tech_stack": ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è1", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è2", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è3"],
        "company_benefits": ["–ø–æ–ª—å–∑–∞1", "–ø–æ–ª—å–∑–∞2", "–ø–æ–ª—å–∑–∞3"],
        "career_growth": ["–ø—É—Ç—å1", "–ø—É—Ç—å2", "–ø—É—Ç—å3"],
        "colleague_messages": {
            "short": ["—Å–æ–æ–±—â–µ–Ω–∏–µ1", "—Å–æ–æ–±—â–µ–Ω–∏–µ2", "—Å–æ–æ–±—â–µ–Ω–∏–µ3"],
            "medium": ["—Å–æ–æ–±—â–µ–Ω–∏–µ1", "—Å–æ–æ–±—â–µ–Ω–∏–µ2"],
            "long": ["–¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"]
        },
        "growth_table": {
            "growth_points": ["—Ç–æ—á–∫–∞1", "—Ç–æ—á–∫–∞2", "—Ç–æ—á–∫–∞3"],
            "vacancies": ["–≤–∞–∫–∞–Ω—Å–∏—è1", "–≤–∞–∫–∞–Ω—Å–∏—è2", "–≤–∞–∫–∞–Ω—Å–∏—è3"],
            "courses": ["–∫—É—Ä—Å1", "–∫—É—Ä—Å2", "–∫—É—Ä—Å3"]
        },
        "image_description": "–æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏",
        "sound_description": "–æ–ø–∏—Å–∞–Ω–∏–µ –∑–≤—É–∫–∞"
    }
    
    –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π IT-–ø—Ä–æ—Ñ–µ—Å—Å–∏–∏. –≤ —Ä–∞—Å–ø–æ—Ä—è–¥–∫–µ –¥–Ω—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ä–æ–≤–Ω–æ 9 (—Ñ–æ—Ä–º–∞—Ç: –≤—Ä–µ–º—è - –∑–∞–¥–∞—á–∞), –æ–Ω–∏ –æ–ø–∏—Å–∞–Ω—ã –∫–æ—Ä–æ—Ç–∫–æ. —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–ª–ª–µ–≥ —á–µ—Ä–µ–¥—É—é—Ç—Å—è —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ —Å –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º–∏ (–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∞–±–æ—Ç–æ–π, –≤–æ–∑–º–æ–∂–Ω–æ –≤ —à—É—Ç–ª–∏–≤–æ–π —Ñ–æ—Ä–º–µ). –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –∏–∑ –ª–±—ã—Ö —Å—Ñ–µ—Ä, –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ IT"""
    
    try:
        response = giga.chat(system_prompt)
        response_text = response.choices[0].message.content

        if '```json' in response_text:
            json_str = response_text.split('```json')[1].split('```')[0].strip()
        elif '```' in response_text:
            json_str = response_text.split('```')[1].strip()
        else:
            json_str = response_text.strip()
        
        data = json.loads(json_str)
        return data
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        
def main():
    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–ª—É—á–∞–π–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏...")
    data = generate_profession_data()
    profession = data["profession"]
    schedule = data["schedule"]
    tech_stack = data["tech_stack"]
    company_benefits = data["company_benefits"]
    career_growth = data["career_growth"]
    colleague_messages = data["colleague_messages"]
    growth_table = data["growth_table"]
    image_description = data["image_description"]
    sound_description = data["sound_description"]
    print(f"\n=== –ü–†–û–§–ï–°–°–ò–Ø: {profession} ===")
    print(f"\nüìÖ –†–ê–°–ü–û–†–Ø–î–û–ö –î–ù–Ø:")
    print("–£—Ç—Ä–æ:")
    for item in schedule["morning"]:
        print(f"  ‚Ä¢ {item}")
    print("–û–±–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:")
    for item in schedule["lunch"]:
        print(f"  ‚Ä¢ {item}")
    print("–í–µ—á–µ—Ä:")
    for item in schedule["evening"]:
        print(f"  ‚Ä¢ {item}")
    
    print(f"\nüõ† –¢–ï–•–ù–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –°–¢–ï–ö:")
    for tech in tech_stack:
        print(f"  ‚Ä¢ {tech}")
    
    print(f"\nüíº –ü–û–õ–¨–ó–ê –î–õ–Ø –ö–û–ú–ü–ê–ù–ò–ò:")
    for benefit in company_benefits:
        print(f"  ‚Ä¢ {benefit}")
    
    print(f"\nüìà –ü–£–¢–ò –†–û–°–¢–ê:")
    for growth in career_growth:
        print(f"  ‚Ä¢ {growth}")
    
    print(f"\nüí¨ –°–û–û–ë–©–ï–ù–ò–Ø –û–¢ –ö–û–õ–õ–ï–ì:")
    print("–ö–æ—Ä–æ—Ç–∫–∏–µ:")
    for msg in colleague_messages["short"]:
        print(f"  ‚Ä¢ {msg}")
    print("–°—Ä–µ–¥–Ω–∏–µ:")
    for msg in colleague_messages["medium"]:
        print(f"  ‚Ä¢ {msg}")
    print("–î–ª–∏–Ω–Ω–æ–µ:")
    print(f"  ‚Ä¢ {colleague_messages['long'][0]}")
    
    print(f"\nüìä –¢–ê–ë–õ–ò–¶–ê –†–û–°–¢–ê:")
    print(f"{'–¢–æ—á–∫–∏ —Ä–æ—Å—Ç–∞':<100} {'–í–∞–∫–∞–Ω—Å–∏–∏':<100} {'–ö—É—Ä—Å—ã':<100}")
    print("-" * 75)
    for i in range(len(growth_table["growth_points"])):
        print(f"{growth_table['growth_points'][i]:<100} {growth_table['vacancies'][i]:<100} {growth_table['courses'][i]:<100}")
    
    print(f"\nüñº –û–ü–ò–°–ê–ù–ò–ï –ö–ê–†–¢–ò–ù–ö–ò:")
    print(image_description)
    print(f"\nüîä –û–ü–ò–°–ê–ù–ò–ï –ó–í–£–ö–ê:")
    print(sound_description)
    return {
        "profession": profession,
        "schedule": schedule,
        "tech_stack": tech_stack,
        "company_benefits": company_benefits,
        "career_growth": career_growth,
        "colleague_messages": colleague_messages,
        "growth_table": growth_table,
        "image_description": image_description,
        "sound_description": sound_description
    }

if __name__ == "__main__":
    generated_data = main()